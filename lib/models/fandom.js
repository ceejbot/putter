/*
Fandoms

The fandom document contains mostly-static textual descriptions
of a fandom, seen when viewing the fandom fic listing pages. It
also lists related fandoms, aka fandoms that do not count as
crossovers when a fic is tagged with them and with this fandom.
An example would be "Buffy the Vampire Slayer", which would have
"Angel the Series" listed as a related fandom. Fic tagged as both
'btvs' and 'ats' would not be treated as a crossover.

It also defines fandom-specific tags.

The fandom indexes in redis index fic by the following:

- fandom-specific tags
- characters
- pairings

*/

var
	libutils = require('../utilities'),
	polyclay = require('polyclay'),
	util = require('util')
	;

var Fandom = polyclay.Model.buildClass(
{
	properties:
	{
		id: 'string',
		tag: 'string', // unique text tag, no spaces, generated by hand
		name: 'string', // official name or title
		name_sort: 'string', // stopwords removed
		description: 'string', // text description, for splash page
		related: 'array', // list of tags for related fandoms
		characters: 'array',
		pairings: 'array',
		tags: 'array',
		created: 'date',
		modified: 'date', // timestamp
		version: 'number'
	},
	required: [ 'id', 'name', ],
	index: [ 'name', ],
	singular: 'fandom',
	plural: 'fandoms',
	initialize: function()
	{
		this.created = Date.now();
		this.version = 1;
	},
});

polyclay.persist(Fandom, 'id');

Fandom.prototype.advertisedTags = function()
{
	var self = this;
	return self.tags.map(function(item)
	{
		return self.key + ':' + item;
	});
};

Fandom.searchMapping =
{
	'fandom':
	{
		properties:
		{
			'id': { type: 'string', index: 'not_analyzed', include_in_all: false },
			'tag': { type: 'string', analyzer: 'keyword', index_name: 'tag' },
			'name': { type: 'string', analyzer: 'snowball', "store": "yes" },
			'name_sort': { type: 'string', index: 'not_analyzed', "store": "yes" },
			'description': { type: 'string', analyzer: 'english', "store": "yes" },
		}
	}
};

Fandom.prototype.searchData = function()
{
	return {
		type: this.plural,
		id: this.key,
		tag: this.key,
		name: this.name,
		name_sort: this.name_sort,
		description: this.description
	};
};

module.exports = Fandom;
